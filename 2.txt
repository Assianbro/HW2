#include&lt;stdio.h&gt;??
#include&lt;stdlib.h&gt;??
void freee(int n,int heap[])??
{??
? ? int i;??
? ? for(i=0;i&lt;n;i++)??
? ? {??
? ? ? ? heap[i]=0;??
? ? }??
}??
int load(int heap[])??
{??
? ? int i,n;??
? ? scanf(&quot;%d&quot;,&amp;n);??
? ? for(i=1;i&lt;=n;i++)??
? ? {??
? ? ? ? scanf(&quot;%d&quot;,&amp;heap[i]);??
? ? }??
? ? return n;??
}??
void dump(int heap[],int n)??
{??
? ? int i;??
? ? printf(&quot;[&quot;);??
? ? for(i=1;i&lt;=n;i++)??
? ? {??
? ? ? ? printf(&quot;%d&quot;,heap[i]);??
? ? ? ? if(i!=n)??
? ? ? ? ? ? printf(&quot;,&quot;);??
? ? }??
? ? printf(&quot;]\n&quot;);??
}??
void makeheap(int h[],int n)??
{??
? ? int i,parent,child,t;??
? ? for(i=2;i&lt;n;++i)??
? ? {??
? ? ? ? for(child=i,parent=child/2;parent&gt;0;child=parent,parent=child/2)??
? ? ? ? {??
? ? ? ? ? ? if(h[parent]&gt;h[child])break;??
? ? ? ? ? ? t=h[parent];??
? ? ? ? ? ? h[parent]=h[child];??
? ? ? ? ? ? h[child]=t;??
? ? ? ? }??
? ? ? ? printf(&quot;make step %d:&quot;,i-1);dump(h,i);??
? ? }??
}??
void downheap(int h[],int n)??
{??
? ? int parent,child,t;??

? ? for(parent=1;;parent=child)??
? ? {??
? ? ? ? child=parent+parent;??
? ? ? ? if(child&gt;n)break;??
? ? ? ? if(child+1&lt;=n&amp;&amp;h[child]&lt;h[child+1])child++;??
? ? ? ? if(h[parent]&gt;h[child])break;??
? ? ? ? t=h[parent],h[parent]=h[child],h[child]=t;??
? ? }??
? ? dump(h,n);??
}??
void sortheap(int h[],int n)??
{??
? ? int last,t,a=1;??
? ? for(last=n;;--last)??
? ? {??
? ? ? ? t=h[1],h[1]=h[last],h[last]=t;??
? ? ? ? if(last&gt;=2)??
? ? ? ? {??
? ? ? ? ? ? printf(&quot;sort step %d:&quot;,a++);??
? ? ? ? ? ? downheap(h,last-1);??
? ? ? ? }??
? ? ? ? else break;??
? ? }??
}??
int main(){??
? ? int cases=1,n,heap[100],i;??
? ? while(1)??
? ? {??
? ? ? ? n=load(heap);??
? ? ? ? if(n==0)break;??
? ? ? ? printf(&quot;Case %d:\n&quot;,cases++);??
? ? ? ? printf(&quot;input:&quot;);??
? ? ? ? dump(heap,n);??
? ? ? ? makeheap(heap,n);??
? ? ? ? printf(&quot;max-heap:&quot;);dump(heap,n);??
? ? ? ? sortheap(heap,n);??
? ? ? ? printf(&quot;sorted:&quot;);??
? ? ? ? dump(heap,n);??
? ? ? ? freee(n,heap);??
? ? }??
}